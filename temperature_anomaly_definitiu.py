# -*- coding: utf-8 -*-
"""Temperature_anomaly_definitiu.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q_NxRog5-9T8PqjlXdi08c0tlvZIlOXj

# **ERA5 MONTHLY TEMPERATURE DATA ( CALCULATING ANOMALIES AND ABSOLUTE TEMPERATURE )**

---

For more datasets:

 https://developers.google.com/earth-engine/datasets/tags/climate

---

# **Installing GEE, importing required libraries, authentication, base map**
"""

# Installs geemap

import subprocess
try:
    import geemap
except ImportError:
    print('Installing geemap ...')
    subprocess.check_call(["python", '-m', 'pip', 'install', 'geemap'])

import ee
import geemap
import pandas as pd # library to manage DataFrames
import matplotlib.pyplot as plt # library to manage Graphs

# Iniciates sesion

ee.Authenticate()
ee.Initialize(project='ee-alexorri')

# Creating Base Map

Map = geemap.Map(center=[-50.498345, -73.120696], zoom=12)

punt = ee.Geometry.Point(-73.120696, -50.498345)
Map.addLayer(punt, {'color': 'red'}, 'Location point')  # shows point on map

# Visualize

Map

"""##**Monthly temperature anomaly within a reference timerange**

###**Calculating the mean and the standard devaition for the reference timerange**

Reference timerange; considering a minimum of 30 years (1961 to 1990)
"""

# Reference timerange from 1961-1990

start_date_ref = "1961-01-01"
end_date_ref = "1990-12-31"

# Check for bands within the dataset

dataset = ee.ImageCollection('ECMWF/ERA5_LAND/MONTHLY_AGGR')
bandes=dataset.first().bandNames()
bandes.getInfo()

# Defining the band selected on the dataset filtering with point and timerange

dataset_ref = ee.ImageCollection("ECMWF/ERA5_LAND/MONTHLY_AGGR")\
  .filterBounds(punt) \
  .filterDate(start_date_ref, end_date_ref) \
  .select("temperature_2m")

# Function that extracts temperature values for the point and the data
# (year and month). Temperature values are given in (K); changing that to (celsius)

def get_temperature(img):
    date = img.date().format("YYYY-MM")
    value = img.sample(punt).first().get('temperature_2m')
    value = ee.Number(value).subtract(273.15)

    return ee.Feature(None, {"date": date, "temperature": value})

# Applying the function to the dataset within reference timerange

temperature_features_ref = dataset_ref.map(get_temperature).getInfo()

# Converting results into a dictionary

data_list_ref = [feat["properties"] for feat in temperature_features_ref["features"]]

# Conversion to DataFrame

df_ref = pd.DataFrame(data_list_ref)
display(df_ref)

# Converting column "date" into datetime format

df_ref["date"] = pd.to_datetime(df_ref["date"])

# Grouping monthly for calculating the mean and the standard deviation

df_ref["month"] = df_ref["date"].dt.month
df_ref["year"] = df_ref["date"].dt.year

stats = df_ref.groupby("month")["temperature"].agg(["mean", "std"]).reset_index()

# Showing results

print(stats)

"""##**Calculating monthly temperature anomaly for a single year**"""

# Select year to calaculate de anomaly

year = 2022

# Time range for the year selected ( whole year )

start_date_analisis = str(year) + "-01-01"
end_date_analisis = str(year) + "-12-31"

# Dataset to calculate anomaly ( note is the temperature; change also the 30 year reference if we want to analyse another variable)

dataset_analisis = ee.ImageCollection("ECMWF/ERA5_LAND/MONTHLY_AGGR")\
  .filterBounds(punt) \
  .filterDate(start_date_analisis, end_date_analisis) \
  .select("temperature_2m")

# Applying function to calculate de temperature at point

temperature_features_analisis = dataset_analisis.map(get_temperature).getInfo()

data_list_analisis = [feat["properties"] for feat in temperature_features_analisis["features"]]
df_analisis = pd.DataFrame(data_list_analisis)
df_analisis["date"] = pd.to_datetime(df_analisis["date"])
df_analisis["month"] = df_analisis["date"].dt.month

# Calculate the temperature anomaly

df_merged = pd.merge(df_analisis, stats, on="month", how="left")


df_merged["anomalia"] = (df_merged["temperature"] - df_merged["mean"]) / df_merged["std"]

# Show results

print(df_merged)

# Visualize temperature anomaly on a graph

import matplotlib.pyplot as plt

# Red are positive anomaly values while blue are negative

colors = ['blue' if val < 0 else 'red' for val in df_merged['anomalia']]

plt.bar(df_merged["date"], df_merged["anomalia"],  color=colors, width=20)

plt.xlabel("Data")
plt.ylabel("Anomalia de temperatura")
plt.title("Anomalia de temperatura per l'any " + str(year))
plt.show()

"""##**Calculating monthly temperature anomaly for a range of years**"""

# Define timerange

start_year_analysis = 2017
end_year_analysis = 2025

# Creates a list to store the DataFreame for each year

df_anomaly_list = []

for year in range(start_year_analysis, end_year_analysis + 1):
    start_date_analysis = str(year) + "-01-01"
    end_date_analysis = str(year) + "-12-31"

    dataset_analysis = ee.ImageCollection("ECMWF/ERA5_LAND/MONTHLY_AGGR") \
        .filterBounds(punt) \
        .filterDate(start_date_analysis, end_date_analysis) \
        .select("temperature_2m")

    temp_features_analysis = dataset_analysis.map(get_temperature).getInfo()

    data_list_analysis = [feat["properties"] for feat in temp_features_analysis["features"]]
    df_analysis = pd.DataFrame(data_list_analysis)
    df_analysis["date"] = pd.to_datetime(df_analysis["date"])
    df_analysis["month"] = df_analysis["date"].dt.month

    df_merged = pd.merge(df_analysis, stats, on="month", how="left")
    df_merged["anomaly"] = (df_merged["temperature"] - df_merged["mean"]) / df_merged["std"]

    # Adding the DataFrame to the list

    df_anomaly_list.append(df_merged)

df_anomalies = pd.concat(df_anomaly_list)

# Show results

print(df_anomalies)

"""##**Creating the final plot with all info gathered**

Anomaly and temperature values are added


"""

import matplotlib.pyplot as plt
import matplotlib.dates as mdates

# Set global style

plt.rcParams.update({
    'font.family': 'serif',
    'font.size': 12,
    'axes.titlesize': 14,
    'axes.labelsize': 12,
    'xtick.labelsize': 10,
    'ytick.labelsize': 10
})

# Create figure and axes

fig, ax1 = plt.subplots(figsize=(15, 6))

# Plot temperature anomaly (bars)

colors = ['dodgerblue' if val < 0 else 'tomato' for val in df_anomalies['anomaly']]
bars = ax1.bar(df_anomalies["date"], df_anomalies["anomaly"], color=colors, width=20, alpha=0.7)
ax1.set_xlabel("Data")
ax1.set_ylabel("Anomalia de temperatura [-]", color="black")
ax1.tick_params(axis='y', labelcolor='black')

# Grid for primary axis

ax1.grid(True, linestyle='--', linewidth=0.5, alpha=0.7)

# Plot temperature (line) on second y-axis

ax2 = ax1.twinx()
ax2.plot(df_anomalies["date"], df_anomalies["temperature"], color="seagreen", linestyle='-', marker='.')
ax2.set_ylabel("Temperatura (°C)", color="seagreen")
ax2.tick_params(axis='y', labelcolor='green')
ax2.axhline(0, color='gray', linestyle='--', linewidth=1)

# Format x-axis to show only years

ax1.xaxis.set_major_locator(mdates.YearLocator())
ax1.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))
fig.autofmt_xdate(rotation=0)

# Title

plt.title(f"Anomalia de temperatura i temperatura mensual ({start_year_analysis}–{end_year_analysis})")
plt.tight_layout()
plt.show()